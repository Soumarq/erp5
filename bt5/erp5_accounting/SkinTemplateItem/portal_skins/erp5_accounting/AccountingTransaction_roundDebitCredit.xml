<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

""" Rounds debit and credit lines on generated transactions, according to\n
precision of this transaction\'s resource.\n
"""\n
precision = context.getQuantityPrecisionFromResource(context.getResource())\n
resource = context.getResourceValue()\n
\n
line = None\n
total_quantity = 0.0\n
\n
line_list = context.getMovementList(\n
            portal_type=context.getPortalAccountingMovementTypeList())\n
\n
for line in line_list:\n
  line_quantity = round(line.getQuantity(), precision)\n
  line.setQuantity(line_quantity)\n
  total_quantity += line_quantity\n
\n
# The total quantity should be zero with a little error, if simulation has been\n
# completely applied, because the debit and the credit must be balanced. However,\n
# this is not the case, if the delivery is divergent, as the builder does not\n
# adopt prevision automatically, when a conflict happens between the simulation\n
# and user-entered values.\n
if abs(round(total_quantity, precision)) > 2 * resource.getBaseUnitQuantity():\n
  return\n
\n
total_price = round(context.getTotalPrice(), precision)\n
asset_list = (\'asset/receivable\', \'asset/payable\')\n
try:\n
  asset_line = [x for x in line_list \\\n
    if x.getSourceValue().getAccountType() in asset_list][0]\n
except IndexError:\n
  assert total_price == 0.0 and total_quantity == 0.0, \\\n
    \'receivable or payable line not found.\'\n
  return\n
\n
account_type_dict = dict()\n
for line in line_list:\n
  for account in (line.getSourceValue(portal_type=\'Account\'),\n
      line.getDestinationValue(portal_type=\'Account\'),):\n
    account_type_dict.setdefault(line, set()).add(\n
      account is not None and account.getAccountTypeValue() or None)\n
\n
abs_total_quantity = abs(round(total_quantity, precision))\n
line_to_adjust = None\n
\n
# If we have a difference between total credit and total debit, one line is \n
# chosen to add or remove this difference. The payable or receivable is chosen \n
# only if this line is not matching with invoice total price, because total price\n
# comes from all invoice lines (quantity * price) and it is what should be payed.\n
# And payable or receivable line is the record in the accounting of what has \n
# to be payed. Then, we must not touch it when it already matches.\n
# If is not a payable or receivable, vat or other line (ie. income) is used.\n
if abs_total_quantity != 0:\n
  account_type = context.getPortalObject().portal_categories.account_type\n
  if round(abs(asset_line.getQuantity()), precision) != round(abs(context.getTotalPrice()), precision):\n
    # adjust payable or receivable\n
    for line in line_list:\n
      if account_type.asset.receivable in account_type_dict[line] or \\\n
          account_type.liability.payable in account_type_dict[line]:\n
        line_to_adjust = line\n
        break\n
  if line_to_adjust is None:\n
    # VAT\n
    for line in line_list:\n
      if account_type.asset.receivable.refundable_vat in account_type_dict[line] or \\\n
          account_type.liability.payable.collected_vat in account_type_dict[line]:\n
        line_to_adjust = line\n
        break\n
  if line_to_adjust is None:\n
    # adjust anything except payable or receivable\n
    for line in line_list:\n
      if account_type.asset.receivable not in account_type_dict[line] and \\\n
          account_type.liability.payable not in account_type_dict[line]:\n
        line_to_adjust = line\n
        break\n
\n
if line_to_adjust is not None:\n
  line_to_adjust.setQuantity(\n
    round(line_to_adjust.getQuantity() - total_quantity, precision))\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>AccountingTransaction_roundDebitCredit</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
