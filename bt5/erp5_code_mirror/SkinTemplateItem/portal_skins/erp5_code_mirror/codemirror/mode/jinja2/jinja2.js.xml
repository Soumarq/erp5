<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts93403090.19</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>jinja2.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

CodeMirror.defineMode("jinja2", function() {\n
    var keywords = ["and", "as", "block", "endblock", "by", "cycle", "debug", "else", "elif",\n
                    "extends", "filter", "endfilter", "firstof", "for",\n
                    "endfor", "if", "endif", "ifchanged", "endifchanged",\n
                    "ifequal", "endifequal", "ifnotequal",\n
                    "endifnotequal", "in", "include", "load", "not", "now", "or",\n
                    "parsed", "regroup", "reversed", "spaceless",\n
                    "endspaceless", "ssi", "templatetag", "openblock",\n
                    "closeblock", "openvariable", "closevariable",\n
                    "openbrace", "closebrace", "opencomment",\n
                    "closecomment", "widthratio", "url", "with", "endwith",\n
                    "get_current_language", "trans", "noop", "blocktrans",\n
                    "endblocktrans", "get_available_languages",\n
                    "get_current_language_bidi", "plural"];\n
    keywords = new RegExp("^((" + keywords.join(")|(") + "))\\\\b");\n
\n
    function tokenBase (stream, state) {\n
        var ch = stream.next();\n
        if (ch == "{") {\n
            if (ch = stream.eat(/\\{|%|#/)) {\n
                stream.eat("-");\n
                state.tokenize = inTag(ch);\n
                return "tag";\n
            }\n
        }\n
    }\n
    function inTag (close) {\n
        if (close == "{") {\n
            close = "}";\n
        }\n
        return function (stream, state) {\n
            var ch = stream.next();\n
            if ((ch == close || (ch == "-" && stream.eat(close)))\n
                && stream.eat("}")) {\n
                state.tokenize = tokenBase;\n
                return "tag";\n
            }\n
            if (stream.match(keywords)) {\n
                return "keyword";\n
            }\n
            return close == "#" ? "comment" : "string";\n
        };\n
    }\n
    return {\n
        startState: function () {\n
            return {tokenize: tokenBase};\n
        },\n
        token: function (stream, state) {\n
            return state.tokenize(stream, state);\n
        }\n
    };\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2053</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
