<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts93404951.5</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>closetag.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * Tag-closer extension for CodeMirror.\n
 *\n
 * This extension adds an "autoCloseTags" option that can be set to\n
 * either true to get the default behavior, or an object to further\n
 * configure its behavior.\n
 *\n
 * These are supported options:\n
 *\n
 * `whenClosing` (default true)\n
 *   Whether to autoclose when the \'/\' of a closing tag is typed.\n
 * `whenOpening` (default true)\n
 *   Whether to autoclose the tag when the final \'>\' of an opening\n
 *   tag is typed.\n
 * `dontCloseTags` (default is empty tags for HTML, none for XML)\n
 *   An array of tag names that should not be autoclosed.\n
 * `indentTags` (default is block tags for HTML, none for XML)\n
 *   An array of tag names that should, when opened, cause a\n
 *   blank line to be added inside the tag, and the blank line and\n
 *   closing line to be indented.\n
 *\n
 * See demos/closetag.html for a usage example.\n
 */\n
\n
(function() {\n
  CodeMirror.defineOption("autoCloseTags", false, function(cm, val, old) {\n
    if (old != CodeMirror.Init && old)\n
      cm.removeKeyMap("autoCloseTags");\n
    if (!val) return;\n
    var map = {name: "autoCloseTags"};\n
    if (typeof val != "object" || val.whenClosing)\n
      map["\'/\'"] = function(cm) { return autoCloseSlash(cm); };\n
    if (typeof val != "object" || val.whenOpening)\n
      map["\'>\'"] = function(cm) { return autoCloseGT(cm); };\n
    cm.addKeyMap(map);\n
  });\n
\n
  var htmlDontClose = ["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param",\n
                       "source", "track", "wbr"];\n
  var htmlIndent = ["applet", "blockquote", "body", "button", "div", "dl", "fieldset", "form", "frameset", "h1", "h2", "h3", "h4",\n
                    "h5", "h6", "head", "html", "iframe", "layer", "legend", "object", "ol", "p", "select", "table", "ul"];\n
\n
  function autoCloseGT(cm) {\n
    var pos = cm.getCursor(), tok = cm.getTokenAt(pos);\n
    var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n
    if (inner.mode.name != "xml" || !state.tagName || cm.getOption("disableInput")) return CodeMirror.Pass;\n
\n
    var opt = cm.getOption("autoCloseTags"), html = inner.mode.configuration == "html";\n
    var dontCloseTags = (typeof opt == "object" && opt.dontCloseTags) || (html && htmlDontClose);\n
    var indentTags = (typeof opt == "object" && opt.indentTags) || (html && htmlIndent);\n
\n
    var tagName = state.tagName;\n
    if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n
    var lowerTagName = tagName.toLowerCase();\n
    // Don\'t process the \'>\' at the end of an end-tag or self-closing tag\n
    if (!tagName ||\n
        tok.type == "string" && (tok.end != pos.ch || !/[\\"\\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n
        tok.type == "tag" && state.type == "closeTag" ||\n
        tok.string.indexOf("/") == (tok.string.length - 1) || // match something like <someTagName />\n
        dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n
        CodeMirror.scanForClosingTag && CodeMirror.scanForClosingTag(cm, pos, tagName,\n
                                                                     Math.min(cm.lastLine() + 1, pos.line + 50)))\n
      return CodeMirror.Pass;\n
\n
    var doIndent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n
    var curPos = doIndent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1);\n
    cm.replaceSelection(">" + (doIndent ? "\\n\\n" : "") + "</" + tagName + ">",\n
                        {head: curPos, anchor: curPos});\n
    if (doIndent) {\n
      cm.indentLine(pos.line + 1, null, true);\n
      cm.indentLine(pos.line + 2, null);\n
    }\n
  }\n
\n
  function autoCloseSlash(cm) {\n
    var pos = cm.getCursor(), tok = cm.getTokenAt(pos);\n
    var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n
    if (tok.type == "string" || tok.string.charAt(0) != "<" ||\n
        tok.start != pos.ch - 1 || inner.mode.name != "xml" ||\n
        cm.getOption("disableInput"))\n
      return CodeMirror.Pass;\n
\n
    var tagName = state.context && state.context.tagName;\n
    if (tagName) cm.replaceSelection("/" + tagName + ">", "end");\n
    else return CodeMirror.Pass;\n
  }\n
\n
  function indexOf(collection, elt) {\n
    if (collection.indexOf) return collection.indexOf(elt);\n
    for (var i = 0, e = collection.length; i < e; ++i)\n
      if (collection[i] == elt) return i;\n
    return -1;\n
  }\n
})();\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4385</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
