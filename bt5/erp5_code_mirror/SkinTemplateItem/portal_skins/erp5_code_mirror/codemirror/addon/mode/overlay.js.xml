<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts93403077.95</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>overlay.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// Utility function that allows modes to be combined. The mode given\n
// as the base argument takes care of most of the normal mode\n
// functionality, but a second (typically simple) mode is used, which\n
// can override the style of text. Both modes get to parse all of the\n
// text, but when both assign a non-null style to a piece of code, the\n
// overlay wins, unless the combine argument was true, in which case\n
// the styles are combined.\n
\n
// overlayParser is the old, deprecated name\n
CodeMirror.overlayMode = CodeMirror.overlayParser = function(base, overlay, combine) {\n
  return {\n
    startState: function() {\n
      return {\n
        base: CodeMirror.startState(base),\n
        overlay: CodeMirror.startState(overlay),\n
        basePos: 0, baseCur: null,\n
        overlayPos: 0, overlayCur: null\n
      };\n
    },\n
    copyState: function(state) {\n
      return {\n
        base: CodeMirror.copyState(base, state.base),\n
        overlay: CodeMirror.copyState(overlay, state.overlay),\n
        basePos: state.basePos, baseCur: null,\n
        overlayPos: state.overlayPos, overlayCur: null\n
      };\n
    },\n
\n
    token: function(stream, state) {\n
      if (stream.start == state.basePos) {\n
        state.baseCur = base.token(stream, state.base);\n
        state.basePos = stream.pos;\n
      }\n
      if (stream.start == state.overlayPos) {\n
        stream.pos = stream.start;\n
        state.overlayCur = overlay.token(stream, state.overlay);\n
        state.overlayPos = stream.pos;\n
      }\n
      stream.pos = Math.min(state.basePos, state.overlayPos);\n
      if (stream.eol()) state.basePos = state.overlayPos = 0;\n
\n
      if (state.overlayCur == null) return state.baseCur;\n
      if (state.baseCur != null && combine) return state.baseCur + " " + state.overlayCur;\n
      else return state.overlayCur;\n
    },\n
\n
    indent: base.indent && function(state, textAfter) {\n
      return base.indent(state.base, textAfter);\n
    },\n
    electricChars: base.electricChars,\n
\n
    innerMode: function(state) { return {state: state.base, mode: base}; },\n
\n
    blankLine: function(state) {\n
      if (base.blankLine) base.blankLine(state.base);\n
      if (overlay.blankLine) overlay.blankLine(state.overlay);\n
    }\n
  };\n
};\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2178</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
